#저장소업데이트
sudo apt update
sudo apt upgrade -y

#swap 메모리 비활성화
sudo swapoff -a
sudo sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
sudo free -m

#Kubernetes 클러스터를 실행하는 데 필요한 두 개의 커널 모듈을 로드
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

#PoD와 서비스 간의 적절한 네트워킹 및 통신 네트워크 브릿지 설정
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

#재부팅 없이 설정 적용
sudo sysctl --system

#컨테이너 런타임 설치를 위해 docker와 containerd를 설치해 준다
sudo apt-get update
sudo apt-get install -y ca-certificates curl

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Docker를 **stable** 버전으로 설치하기 위해 아래의 명령을 내립니다.
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#도커 및 containerd 설치
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

sudo containerd config default | sudo tee /etc/containerd/config.toml

# Systemd cgroup 드라이버로 설정
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml


sudo systemctl restart containerd  
#sudo systemctl status containerd  

sudo apt-get install -y apt-transport-https ca-certificates curl gpg

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

#쿠버네티스 설치 
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

sudo systemctl enable kubelet
#sudo systemctl status kubelet
#sudo systemctl restart kubelet


#1번 마스터 노드에서 초기화 실행하면서 LoadBalancer 등록 
sudo kubeadm init --control-plane-endpoint "lb.example.com:6443" --upload-certs

#2,3번 마스터 노드를 1번 마스터 노드에 join 한다 
 sudo kubeadm join lb.example.com:6443 --token hcltdf.6nqo4ndj9a6pe10m \
        --discovery-token-ca-cert-hash sha256:0628f2b63c6e3282907127a45f358711a55081407d2faf7ce5c0425e319ec7ee \
        --control-plane --certificate-key c8c1e97b283e771f3e915150f7d307c5c2ccdedb30a1917803704cb60d6b6b4b
		

#설치 성공하면 아래 스크립트 모든 마스터 노드에서 실행 
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# calico 설정, 1번 마스터 노드에서 실행 
curl -O https://calico-v3-25.netlify.app/archive/v3.25/manifests/calico.yaml
kubectl apply -f calico.yaml

#쉘 구문 자동완성 플러그 추가 
sudo apt install bash-completion

#아래 구문 쉘에서 실행 
source <(kubectl completion bash)
source <(kubeadm completion bash)

#다음에 로그인시 실행될 수 있도록 .bashrc 맨 마지막에 아래 구문 추가함 
echo "source <(kubectl completion bash)" >> .bashrc
echo "source <(kubeadm completion bash)" >> .bashrc



#엔진X 웹서버 설치 후 확인
kubectl run webserver --image=nginx


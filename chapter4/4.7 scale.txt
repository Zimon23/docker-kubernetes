  scale 명령어 설명

  --scale 옵션은 특정 서비스의 컨테이너 인스턴스(instance) 수를 조절하여 수평 확장(Horizontal Scaling)을
  구현하는 핵심 기능입니다.

  기본 구문

   1 docker compose up [옵션들] --scale <서비스명>=<숫자>

   * <서비스명>: docker-compose.yml 파일에 정의한 서비스의 이름입니다. (예: web)
   * <숫자>: 해당 서비스에 대해 실행할 컨테이너의 총 개수를 지정합니다.

  동작 원리

  --scale 옵션을 사용하면 Docker Compose는 다음과 같이 동작합니다.

   1. 컨테이너 수 조절: 지정된 <숫자>에 맞춰 컨테이너의 개수를 조절합니다.
       * 확장 (Scale-out): 현재 실행 중인 컨테이너 수보다 지정된 숫자가 크면, 부족한 만큼 새로운 컨테이너를
         추가로 생성하여 실행합니다.
       * 축소 (Scale-in): 현재 실행 중인 컨테이너 수보다 지정된 숫자가 작으면, 초과하는 만큼의 컨테이너를
         중지하고 삭제합니다.

   2. 네트워크와 로드 밸런싱: 이것이 --scale 기능의 핵심입니다.
       * docker-compose는 같은 서비스의 여러 컨테이너들을 내부 네트워크에서 동일한 서비스 이름(또는 별명)으로
         관리합니다.
       * 예를 들어, web 서비스를 3개로 확장하면, nginx 컨테이너가 Docker 네트워크에 fastapi-app(web 서비스의
         별명)이라는 호스트 이름을 요청(DNS 쿼리)할 때, Docker는 web 컨테이너 3개의 내부 IP 주소 목록을
         반환합니다.
       * nginx는 이 IP 주소 목록을 받아, 특별한 설정 없이도 기본적으로 라운드 로빈(Round-Robin) 방식으로
         요청을 분산시킵니다. 첫 번째 요청은 첫 번째 IP로, 두 번째 요청은 두 번째 IP로, 세 번째 요청은 세
         번째 IP로, 그리고 네 번째 요청은 다시 첫 번째 IP로 보내는 식입니다.
       * 즉, Docker의 내장 DNS 기능과 Nginx의 기본 프록시 기능이 결합되어 별도의 로드 밸런서 설정 없이도
         간단한 로드 밸런싱이 자동으로 구현되는 것입니다.

  함께 자주 사용하는 옵션들

  --scale 옵션은 다른 옵션들과 함께 사용할 때 더 효과적입니다.

   * -d 또는 --detach: 컨테이너를 백그라운드에서 실행합니다. 이 옵션을 주지 않으면 확장된 모든 컨테이너의
     로그가 현재 터미널에 표시되어 화면이 복잡해지므로, 백그라운드 실행이 거의 필수적입니다.

   * --no-recreate: v1에서 매우 중요한 옵션입니다. 이 옵션은 "이미 실행 중인 컨테이너 중 변경이 필요 없는 것은
     재시작하지 말라"는 의미입니다.
       * 예를 들어, docker-compose up -d --scale web=3 이라고만 입력하면, web 서비스뿐만 아니라 nginx나
         redis 컨테이너까지 불필요하게 재시작될 수 있습니다.
       * --no-recreate 옵션을 함께 사용하면, Docker Compose는 정확히 web 서비스의 컨테이너 수만 조절하고
         나머지 서비스의 컨테이너는 그대로 둡니다. 이는 불필요한 서비스 중단을 막고 확장/축소 작업을 더
         빠르고 안정적으로 만듭니다.
       * v2에서는 기본 값입니다 
       
   * --build: 만약 app.py 같은 소스 코드를 수정한 후에 확장하고 싶다면, --build 옵션을 사용하여 이미지를
     새로 빌드해야 새로운 컨테이너들에 변경사항이 적용됩니다.

  시나리오별 명령어 예시

  시나리오 1: 처음부터 `web` 서비스를 3개로 시작하기
   # 이미지를 빌드하고, 모든 서비스를 백그라운드로 실행하며, web 서비스는 3개로 시작
   docker compose up -d --build --scale web=3

  시나리오 2: 이미 실행 중인 상태에서 `web` 서비스를 5개로 확장하기
   # 백그라운드에서, 다른 컨테이너는 건드리지 말고, web 서비스만 5개로 확장
   docker compose up -d --scale web=5 --no-recreate
   또는
   docker compose scale web=5
   
   # 반드시 nginx의 환경설정 파일을 로드해야 새롭게 추가된 서버의 DNS의 주소를 인식할 수 있습니다
   docker compose exec nginx service nginx reload

  시나리오 3: 실행 중인 `web` 서비스를 다시 1개로 축소하기

   # 백그라운드에서, 다른 컨테이너는 건드리지 말고, web 서비스만 1개로 축소
   docker compose up -d --scale web=1 --no-recreate
   또는 
   docker compose scale web=1

  이처럼 --scale 옵션은 개발 환경에서 간단하게 서비스의 부하 분산 테스트를 하거나, 소규모 프로덕션
  환경에서 수동으로 서비스 용량을 조절해야 할 때 매우 유용하게 사용할 수 있는 강력한 기능입니다.
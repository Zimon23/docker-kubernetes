# 이 파일은 Docker Compose 파일 형식을 따릅니다. 버전 '3.8'을 사용하고 있음을 명시합니다.
# 주석 처리된 이유는 docker-compose 명령어는 버전을 자동으로 인식하지만,
# docker stack 명령어는 이 version 지시어를 사용하지 않기 때문입니다.
# 호환성을 위해 남겨두는 경우가 많습니다.
#version: '3.8'

# 'services'는 이 스택을 구성하는 각 컨테이너(서비스)를 정의하는 최상위 키입니다.
services:
  # 'db' 서비스: 데이터베이스를 담당합니다.
  db:
    # 'image': MariaDB 10.5 버전의 공식 이미지를 사용합니다.
    image: mariadb:10.5
    # 'environment': 컨테이너 내에서 사용할 환경 변수를 설정합니다.
    # 주로 설정 값이나 인증 정보를 전달하는 데 사용됩니다.
    environment:
      # 'MYSQL_ROOT_PASSWORD_FILE': MariaDB의 root 사용자 비밀번호를 파일로부터 읽어옵니다.
      # Docker Swarm의 'secrets' 기능을 사용하여 안전하게 비밀번호를 관리합니다.
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      # 'MYSQL_DATABASE': 생성할 데이터베이스의 이름을 .env 파일의 'DB_NAME' 변수에서 가져옵니다.
      MYSQL_DATABASE: ${DB_NAME}
      # 'MYSQL_USER': 생성할 데이터베이스 사용자의 이름을 .env 파일의 'DB_USER' 변수에서 가져옵니다.
      MYSQL_USER: ${DB_USER}
      # 'MYSQL_PASSWORD_FILE': 생성할 사용자의 비밀번호를 파일로부터 읽어옵니다.
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
    # 'secrets': 이 서비스가 접근할 수 있는 Docker Swarm 시크릿 목록을 정의합니다.
    # 여기서 정의된 시크릿은 컨테이너 내의 /run/secrets/ 경로에 파일로 마운트됩니다.
    secrets:
      - db_root_password
      - db_password
    # 'volumes': 데이터의 영속성을 위해 호스트 머신이나 Docker 볼륨과 컨테이너 내부 경로를 연결합니다.
    volumes:
      # 'mariadb_data_dev'라는 이름의 볼륨을 컨테이너의 '/var/lib/mysql' 경로에 마운트합니다.
      # 이를 통해 컨테이너가 삭제되어도 데이터베이스 데이터는 보존됩니다.
      - mariadb_data_dev:/var/lib/mysql # 개발용 데이터 볼륨 사용
    # 'networks': 이 서비스가 연결될 Docker 네트워크를 지정합니다.
    networks:
      - dev-net

  # 'backend' 서비스: 애플리케이션의 백엔드 로직을 담당합니다.
  backend:
    # 'image': 백엔드 서비스에서 사용할 도커 이미지입니다.
    # .env 파일에 'BACKEND_IMAGE_DEV' 변수가 설정되어 있으면 그 값을 사용하고,
    # 없으면 'my-backend:dev'를 기본값으로 사용합니다.
    # 개발용 이미지는 로컬 빌드만으로 충분합니다 (푸시 불필요)
    image: ${BACKEND_IMAGE_DEV:-my-backend:dev}
    # 'command': 컨테이너가 시작될 때 실행할 명령어입니다.
    # 여기서는 uvicorn 웹 서버를 실행하며, --reload 옵션을 통해 코드 변경 시 자동으로 서버를 재시작합니다.
    # 이는 개발 생산성을 크게 향상시킵니다.
    command: sh -c "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    # 'volumes': 로컬 소스 코드를 컨테이너에 직접 마운트하여 실시간 동기화합니다.
    volumes:
      # 로컬의 './backend' 디렉토리를 컨테이너의 '/app' 디렉토리로 마운트합니다.
      # 로컬에서 코드를 수정하면 즉시 컨테이너 내부에 반영됩니다.
      - ./backend:/app
    # 'environment': 백엔드 애플리케이션에 필요한 환경 변수를 설정합니다.
    environment:
      DB_HOST: db # 데이터베이스 호스트 이름 (같은 네트워크의 'db' 서비스)
      DB_NAME: ${DB_NAME} # .env 파일에서 읽어온 데이터베이스 이름
      DB_USER: ${DB_USER} # .env 파일에서 읽어온 데이터베이스 사용자 이름
      DB_PASSWORD_FILE: /run/secrets/db_password # 데이터베이스 비밀번호 파일 경로
    # 'secrets': 'db' 서비스와 마찬가지로 데이터베이스 비밀번호 시크릿에 접근합니다.
    secrets:
      - db_password
    # 'networks': 'db' 서비스와 동일한 'dev-net' 네트워크에 연결하여 통신합니다.
    networks:
      - dev-net
    # 'depends_on': 서비스 간의 의존성을 정의합니다.
    # 'backend' 서비스는 'db' 서비스가 시작된 후에 시작됩니다.
    depends_on:
      - db

  # 'nginx' 서비스: 웹 서버 및 리버스 프록시 역할을 담당합니다.
  nginx:
    # 'image': Nginx의 최신 공식 이미지를 사용합니다.
    image: nginx:latest
    # 'user': 컨테이너를 실행할 사용자를 root로 지정합니다.
    # nginx.conf 파일 읽기 및 포트 바인딩 권한을 위해 필요할 수 있습니다.
    user: root
    # 'ports': 호스트와 컨테이너 간의 포트를 매핑합니다.
    ports:
      # 호스트의 8080 포트를 컨테이너의 80 포트로 연결합니다.
      # 개발 환경에서는 보통 다른 서비스(예: 로컬 웹서버)가 80 포트를 사용할 수 있으므로,
      # 충돌을 피하기 위해 8080 같은 다른 포트를 사용합니다.
      - "8080:80"
    # 'volumes': 로컬의 설정 파일과 프론트엔드 파일을 컨테이너에 마운트합니다.
    volumes:
      # 로컬의 'nginx.conf' 파일을 컨테이너의 설정 파일 경로에 읽기 전용(:ro)으로 마운트합니다.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # 로컬의 'frontend' 디렉토리를 Nginx가 정적 파일을 제공하는 기본 경로에 읽기 전용으로 마운트합니다.
      - ./frontend:/usr/share/nginx/html:ro
    # 'networks': 다른 서비스들과 통신하기 위해 'dev-net'에 연결합니다.
    networks:
      - dev-net
    # 'depends_on': 'nginx'는 'backend' 서비스에 의존합니다.
    # 백엔드 서버가 준비된 후에 Nginx가 시작되어야 요청을 제대로 전달할 수 있습니다.
    depends_on:
      - backend

# 'volumes': 이 스택에서 사용할 Docker 볼륨을 정의합니다.
volumes:
  # 'mariadb_data_dev': 위 'db' 서비스에서 사용한 네임드 볼륨을 실제로 생성하도록 정의합니다.
  # 네임드 볼륨은 Docker가 관리하며, 데이터를 안전하게 보관합니다.
  mariadb_data_dev:

# 'secrets': 이 스택에서 사용할 Docker Swarm 시크릿을 정의합니다.
secrets:
  # 'db_root_password': 외부에서 이미 생성된 시크릿을 사용하겠다는 의미입니다.
  # 이 Compose 파일은 시크릿을 생성하지 않고, 단지 참조만 합니다.
  # 사용 전 'docker secret create db_root_password <password_file>' 등으로 생성해야 합니다.
  db_root_password:
    external: true
  # 'db_password': 마찬가지로 외부에서 생성된 데이터베이스 사용자 비밀번호 시크릿을 참조합니다.
  db_password:
    external: true

# 'networks': 이 스택에서 사용할 Docker 네트워크를 정의합니다.
networks:
  # 'dev-net': 서비스 간 통신을 위한 'dev-net'이라는 이름의 네트워크를 정의합니다.
  dev-net:
    # 'driver: overlay': 여러 Docker 호스트(노드)에 걸쳐 컨테이너들이 통신할 수 있는
    # 오버레이 네트워크를 사용하도록 드라이버를 지정합니다.
    # 단일 호스트에서 docker-compose로 실행할 때는 'bridge' 드라이버와 유사하게 동작합니다.
    driver: overlay

replicas란 ?

  replicas는 서비스의 컨테이너 수를 조절하는 수평 확장(Horizontal Scaling) 기능입니다. 

  replicas는 "이 서비스는 원래 3개로 구성되는 것이 기본이야" 라고 파일에 명시하는 정적인 설정입니다.
  
  replicas 사용 예제

  이제 기존 visit-counter-nginx 예제의 docker-compose.yml 파일을 수정하여 web 서비스가 기본적으로 3개의 복제본(replicas)을
  갖도록 만들어 보겠습니다.

  1. 기존 visit-counter 예제의 복사 하여 visit-counter-replicas 폴더를 생성하고 이동합니다 
    cp -r ~/visit-counter-nginx ~/visit-counter-replicas
    cd ~/visit-counter-replicas
    
  2. docker-compose.yml 수정

  web 서비스 정의 내부에 replicas: 3 속성을 직접 추가합니다.

  vi docker-compose.yml 
services:
  nginx:
    image: nginx:latest
    ports:
      - "8000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web
    networks:
      - visit-counter-net

  web:
    build: .
    deploy:
      replicas: 3
    depends_on:
      - redis
    networks:
      visit-counter-net:
        aliases:
          - fastapi-app

  redis:
    image: "redis:alpine"
    networks:
      visit-counter-net:
        aliases:
          - redis-db

# 사용자 정의 네트워크를 생성합니다.
networks:
  visit-counter-net:
    driver: bridge

   * 이제 web 서비스의 정의 안에 replicas: 3 이라는 속성이 명시되어 있습니다.

  실행 및 테스트 방법

  이제 더 이상 터미널에서 --scale 옵션을 사용할 필요가 없습니다. docker-compose가 파일을 읽고 replicas
  수만큼 알아서 컨테이너를 실행해 줍니다.

   1. web 서비스를 빌드하고 3개로 실행하기

      docker compose up -d --build
       * Docker Compose는 web 서비스의 replicas: 3 설정을 읽어서 자동으로 web 컨테이너를 3개 실행합니다.

   2. 결과 확인하기

       * docker compose ps 명령어로 컨테이너 목록을 확인하면 web 서비스가 3개 실행된 것을 볼 수 있습니다.
       * 웹 브라우저에서 http://localhost:8000에 접속하고 새로고침을 반복하면, 이전과 동일하게 hostname이
         계속 바뀌는 것을 통해 로드 밸런싱을 확인할 수 있습니다.
       * curl localhost:8000 으로 여러번 실행하고 hostname을 확인합니다 
       
  확장 상태 변경 방법

  이제 서비스의 컨테이너 수를 변경하고 싶다면, 터미널에서 명령어를 바꾸는 대신 `docker-compose.yml` 파일을
  직접 수정하면 됩니다.

  예를 들어, web 서비스를 5개로 늘리고 싶다면:

   1. docker-compose.yml 파일의 replicas 값을 5로 수정합니다.

    ...
   web:
    deploy:
      replicas: 5  # <-- 이 숫자를 수정
      depends_on:
        - redis
    ...

   2. 터미널에서 다시 docker compose up -d를 실행합니다.
     docker-compose up -d
       * Docker Compose가 파일의 변경사항(replicas가 3에서 5로 변경)을 감지하고, web 컨테이너 2개를 추가로
         실행하여 총 5개를 맞춰줍니다.

  이처럼 replicas 속성을 사용하는 것은 서비스의 확장성을 코드 레벨에서 관리하는 선언적인(Declarative) 접근
  방식으로, 프로젝트의 구성을 더 명확하고 일관성 있게 유지하는 데 큰 도움이 됩니다.
환경변수 
ENV Dockerfile에서 사용될 환경 변수 
설정한 환경변수는 ${ENV_NAME} 또는 $ENV_NAME으로 사용 
다음예제는 test 환경 변수에 /home 이라는 값 설정

1. 작업 폴더 생성 및 생성된 경로로 이동 
mkdir ~/env && cd ~/env

2. Dockerfile를 생성한다 
vi Dockerfile
FROM ubuntu:24.04

#환경 변수 선언 
ENV test=/home

#작업 폴더를 변경한다
WORKDIR $test

#환경 변수에 있는 값을 기준으로 해당 폴더에 mytouchfile이 없으면 생성하고, 있으면 시간을 최신 상태로 변경한다
RUN touch $test/mytouchfile

3. Dockerfile을 이용하여 이미지 빌드한다
docker build -t myenv .
 
4. 생성된 이미지를 확인한다(myenv 이미지 확인한다)
docker images

5. 생성된 이미지를 이용하여 컨테이너로 실행한다
docker run -it --rm myenv

6. 컨테이너의 작업 폴더가 /home 인지 확인하고 mytouchfile 의 생성일자를 확인한다
ls -la 

7. 컨테이너 내부에서 $test 라는 환경변수의 값을 확인해본다 
echo $test
echo ${test}


8. 해당 컨테이너를 종료한다 
exit

9. 컨테이너를 실행할 때 환경변수를 전달하는 방법을 확인한다 
docker run -it --rm -e test=myvalue myenv

10. 컨테이너 내부에서 $test 라는 환경변수의 값을 확인해본다 (myvalue 출력되는지 확인한다)
echo $test 
echo ${test}

----------------------------------------------------

1. 파라미터 확장(Parameter Expansion) 문법
${var:-default} => var이 unset이거나 null이면 default를 사용
${var:+value}   => var이 설정되어 있고 null이 아니면 value를 사용


2. Dockerfile를 생성한다 
vi Dockerfile2
FROM ubuntu:24.04

#환경변수 my_env선언 값으로 "my_value" 설정함 
ENV my_env=my_value

#${my_env:-value} : my_env 변수에 값이 없거나 null이면 value 출력 
#${my_env:+value} : my_env 변수에 값이 있으면 value 출력 
RUN echo ${my_env:-value} / ${my_env:+value}

3. Dockerfile을 이용하여 이미지 빌드한다(빌드 로그 RUN 메시지를 확인한다)
docker build -f Dockerfile2 -t myenv2 .

---------------------------------------------------------
LOG_LEVEL과 DEBUG 환경 변수를 활용하여 FastAPI 애플리케이션의 실행 모드 및 로그 레벨을 동적으로 제어하는 Docker 예제 

1. 작업 폴더 생성 및 생성된 경로로 이동 
mkdir ~/env_exam && cd ~/env_exam

2. main.py 파일 작성 
vi main.py
# main.py
from fastapi import FastAPI
import os

app = FastAPI()

@app.get("/")
def read_root():
    return {
        "message": "Hello, FastAPI!",
        "log_level": os.getenv("LOG_LEVEL", "info"),
        "debug_mode": "enabled" if os.getenv("DEBUG") else "disabled"
    }

3. Dockerfile를 생성한다 
vi Dockerfile
FROM python:3.11-slim

WORKDIR /app
COPY main.py .

# 패키지 설치
RUN pip install fastapi uvicorn

# 환경변수 설정 (기본값은 CMD에서 적용)
ENV LOG_LEVEL=info
ENV DEBUG=''

# 실행: LOG_LEVEL은 기본값 fallback, DEBUG가 있으면 --reload 활성화
CMD ["sh", "-c", "uvicorn main:app --host 0.0.0.0 --port 8000 --log-level ${LOG_LEVEL:-info} ${DEBUG:+--reload}"]


3. Dockerfile을 이용하여 이미지 빌드한다
docker build -t fastapi-env-app .
 
4. 생성된 이미지를 확인한다(myenv 이미지 확인한다)
docker images

5. 기본 실행 (log-level: info, reload 비활성화)
docker run -it --name fastapi-info -p 8000:8000 fastapi-env-app

6. curl 명령어로 실행한다 
curl http://localhost:8000

7. 종료하고 log-level=debug 설정 하여 실행한다 
docker rm -f fastapi-info
docker run -it --name fastapi-info -p 8000:8000 -e LOG_LEVEL=debug fastapi-env-app

8. curl 명령어로 실행한다 
curl http://localhost:8000

9 debug 리로드 확인 하기 위해 컨테이너 실행 변경 (볼륨으로 main.py를 설정한다)
docker rm -f fastapi-info
docker run -it --name fastapi-info \
  -p 8000:8000 \
  -v $(pwd):/app \
  -e DEBUG=1 \
  fastapi-env-app

10. 이전과 같은 결과 출력함 
curl http://localhost:8000

11. 볼륨으로 설정한 main.py 파일의 message의 값을 한글로 변경한다 
vi main.py
# main.py
from fastapi import FastAPI
import os

app = FastAPI()

@app.get("/")
def read_root():
    return {
        "message": "안녕하세요. FastAPI입니다!",
        "log_level": os.getenv("LOG_LEVEL", "info"),
        "debug_mode": "enabled" if os.getenv("DEBUG") else "disabled"
    }

12. 컨테이너를 종료하고 다시 실행하지 않고 url을 요청하면 변경된 결과를 얻을 수 있다 



# ==== INPUT ====
# Docker 로깅 드라이버로부터 로그를 받습니다.
<source>
 @type forward
 port 24224
 bind 0.0.0.0
</source>

# ==== FILTER ====
# Nginx 로그를 JSON 형식으로 파싱합니다.
# tag가 "nginx.**"로 시작하는 로그에만 적용됩니다.
<filter nginx.**>
 @type parser
 key_name log
 <parse>
   @type nginx
 </parse>
</filter>

# MySQL 로그에 컨테이너 이름을 추가합니다.
# tag가 "mysql.**"로 시작하는 로그에만 적용됩니다.
<filter mysql.**>
 @type record_transformer
 <record>
   container_name ${tag_parts[2]}
 </record>
</filter>

# ==== OUTPUT ====
# 모든 로그(match '**')를 MongoDB로 보냅니다.
<match **>
 @type mongo

 # MongoDB 컨테이너의 호스트 이름(네트워크 내)
 host mongo-db
 port 27017

 # 데이터베이스와 컬렉션 이름
 database docker_logs
 collection ${tag} # 로그 태그별로 다른 컬렉션에 저장

 # 성능을 위해 Capped Collection 사용 (선택 사항)
 capped
 capped_size 1024m

 # 버퍼 설정 (Fluentd가 다운되어도 로그 유실 방지)
 <buffer>
   @type file
   path /fluentd/log/buffer/mongo
   flush_interval 10s
 </buffer>
</match>

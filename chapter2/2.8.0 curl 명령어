 1. curl이란 무엇인가?

  curl(cURL, "Client URL"의 약자)은 다양한 프로토콜을 사용하여 데이터를
  전송하기 위한 강력하고 유연한 커맨드 라인 도구이자 라이브러리입니다.

  쉽게 말해, 터미널(까만 명령창)에서 웹사이트에 접속하거나, 파일을
  다운로드하거나, API를 호출하는 등 네트워크를 통해 데이터를 주고받는 거의
  모든 작업을 할 수 있게 해주는 "맥가이버 칼" 같은 도구입니다.

  2. curl의 핵심 기능 및 특징

   * 다양한 프로토콜 지원: HTTP, HTTPS, FTP, FTPS, SCP, SFTP, LDAP, SMTP 등
     수많은 프로토콜을 지원합니다. (주로 HTTP/HTTPS를 가장 많이 사용합니다.)
   * 스크립트 활용성: GUI가 없는 커맨드 라인 도구이므로, 쉘 스크립트나 자동화
     작업에 포함시키기 매우 용이합니다.
   * 엄청난 유연성: SSL 인증서, HTTP POST, 쿠키, 사용자 인증, 프록시 설정 등
     거의 모든 종류의 웹 요청을 세밀하게 제어할 수 있는 수많은 옵션을
     제공합니다.
   * 기본 탑재: 대부분의 Linux, macOS 환경에 기본적으로 설치되어 있어 별도의
     설치 없이 바로 사용할 수 있습니다.

  3. 기본 사용법

  가장 기본적인 형태는 curl [옵션] [URL] 입니다.

  # example.com의 HTML 내용을 터미널에 출력
  curl https://www.example.com

  4. 아주 중요하고 자주 쓰이는 옵션들

  curl의 진정한 힘은 다양한 옵션에서 나옵니다. 가장 핵심적인 옵션들을 예시와
  함께 설명해 드리겠습니다.

  -X 또는 --request: 요청 메소드 지정

  HTTP 요청 메소드(GET, POST, PUT, DELETE 등)를 지정합니다. 지정하지 않으면
  기본값은 GET입니다.

  # POST 메소드로 요청
  curl -X POST https://api.example.com/users
  
  # DELETE 메소드로 요청
  curl -X DELETE https://api.example.com/users/123

  -H 또는 --header: 헤더 추가

  HTTP 요청에 커스텀 헤더를 추가합니다. API를 호출할 때 인증 토큰이나 데이터
  타입을 지정하는 데 필수적입니다.

  # JSON 데이터를 보낸다고 명시하는 헤더 추가
  curl -H "Content-Type: application/json" https://api.example.com/data
  
  # 인증 토큰을 헤더에 담아 요청
  curl -H "Authorization: Bearer my-secret-token" https://api.example.com/me

  -d 또는 --data: 데이터 전송 (POST, PUT)

  POST나 PUT 요청 시 서버로 보낼 데이터를 지정합니다.

  # 간단한 key-value 데이터 전송
  curl -X POST -d "name=gemini&job=assistant" https://api.example.com/register
  
  # JSON 데이터 전송 (보통 -H 옵션과 함께 사용)
  curl -X POST -H "Content-Type: application/json" \
  -d '{"name": "gemini", "job": "assistant"}' https://api.example.com/register

  -o 또는 --output: 파일로 저장

  서버로부터 받은 응답(결과)을 터미널에 출력하는 대신, 지정한 파일 이름으로
  저장합니다.

  # example.com의 HTML을 page.html 파일로 저장
  curl -o page.html https://www.example.com
  
  # 이미지 다운로드
  curl -o my_image.jpg https://www.example.com/image.jpg

  -O 또는 --remote-name: 원격 파일 이름 그대로 저장

  URL에 있는 파일 이름 그대로 현재 디렉토리에 저장합니다. -o와 달리 파일
  이름을 직접 지정할 필요가 없습니다.

  # URL의 끝부분인 'installer.pkg'라는 이름으로 파일이 저장됨
  curl -O https://example.com/downloads/installer.pkg

  -L 또는 --location: 리다이렉션 따라가기

  HTTP 응답 코드가 3xx(리다이렉션)일 경우, 서버가 알려주는 새로운 URL로
  자동으로 다시 요청을 보냅니다. 주소가 변경된 사이트 등에 접속할 때
  유용합니다.

   # http로 요청해도 https로 리다이렉션되는 것을 따라가서 최종 페이지를 가져옴
   curl -L http://google.com

  -i 또는 --include: 응답 헤더 포함

  응답 본문(Body)뿐만 아니라, HTTP 응답 헤더(상태 코드, 서버 정보 등)도 함께
  출력합니다.

  curl -i https://www.example.com
  
  결과 예시:

  HTTP/2 200
  content-type: text/html; charset=UTF-8
  ... (기타 헤더들) ...
  
  <!doctype html>
  <html>
  ... (HTML 본문) ...
  </html>

  -v 또는 --verbose: 상세 과정 출력

  요청과 응답의 모든 과정을 아주 상세하게 보여줍니다. 통신이 왜 실패하는지
  디버깅할 때 매우 유용합니다. (요청 헤더, 응답 헤더, SSL 핸드셰이크 과정
  등)

  curl -v https://www.example.com

  -s 또는 --silent: 조용 모드

  진행 상황(다운로드 속도, 시간 등)이나 오류 메시지를 출력하지 않고, 오직
  최종 결과(응답 본문)만 출력합니다. 스크립트에서 깔끔한 결과만 필요할 때
  사용합니다.

  # 다운로드 진행률 표시 없이 결과만 변수에 저장
  RESULT=$(curl -s https://api.example.com/status)

  -u 또는 --user: 사용자 인증

  기본 인증(Basic Authentication)이 필요한 서버에 접속할 때 사용자 이름과
  비밀번호를 전달합니다.

  curl -u username:password https://private.example.com/data

  5. curl vs wget

  공통점:
    명령줄 도구: 모두 터미널에서 실행되는 명령줄 유틸리티입니다.
    파일 다운로드: 웹에서 파일을 다운로드하는 데 사용될 수 있습니다.
    주요 프로토콜 지원: HTTP, HTTPS, FTP 프로토콜을 모두 지원합니다.
    HTTP POST 요청 지원: 웹사이트에 데이터를 전송하는 데 사용될 수 있습니다.
    쿠키 지원: HTTP 쿠키를 처리할 수 있습니다.
    스크립트 자동화: 사용자 상호작용 없이 스크립트에서 자동화된 작업에 적합합니다.
    오픈 소스 및 무료: 둘 다 무료 오픈 소스 소프트웨어입니다.
    
  주요 차이점:
    curl 목적	: 다목적 데이터 전송 도구	
    wget 목적 : 파일 다운로드 및 웹사이트 미러링에 특화된 도구

    curl 출력 방식 : 기본적으로 **표준 출력(터미널)**으로 내용을 출력 (파일로 저장하려면 -o 또는 -O 옵션 필요)	
    wget 출력 방식 : 기본적으로 로컬 파일로 저장 (웹페이지는 index.html 등으로 자동 저장)


    curl 프로토콜 지원 : HTTP, HTTPS, FTP 외에 DICT, FILE, FTPS, Gopher, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, Telnet, TFTP 등 매우 다양한 프로토콜 지원	
    wget 프로토콜 지원 : 주로 HTTP, HTTPS, FTP 지원

    curl 재귀적 다운로드 : 기본적으로 지원하지 않음 (스크립트 등으로 구현 가능)	강력한 재귀적 다운로드 기능 (웹사이트 전체 미러링, 디렉토리 구조 복사 등에 유용)
    wget 재귀적 다운로드 :  파일 업로드	기본 지원 (다양한 프로토콜로 파일 업로드 가능)	기본 지원하지 않음 (별도의 wput과 같은 도구 필요)

    curl 제어 능력	: HTTP 메서드 (GET, POST, PUT 등), 헤더, 인증 등 세밀한 제어 가능	비교적 간단한 제어, 
    wget 제어 능력	: 주로 다운로드에 초점

    curl 사용 난이도	: 다양한 옵션으로 인해 학습 곡선이 다소 가파름	
    wget 사용 난이도	: 기본적인 파일 다운로드에 더 간단하고 직관적

    curl 라이브러리 : libcurl이라는 강력한 크로스 플랫폼 라이브러리에 기반하여 다른 프로그램에 쉽게 통합 가능 
    wget 라이브러리 : 라이브러리 없이 독립적인 명령줄 도구로 사용


    curl 리다이렉트 : 기본적으로 자동 리다이렉트되지 않음 (-L 옵션 필요)	
    wget 리다이렉트 : 기본적으로 자동으로 리다이렉트 따라감

    curl 활용 분야	: API 테스트 및 상호작용, 웹 스크래핑, 복잡한 HTTP 요청 전송, 데이터 업로드, 네트워크 디버깅, 다양한 프로토콜을 이용한 데이터 전송 등	
    wget 활용 분야	: 웹사이트 미러링, 대용량 파일 다운로드, 중단된 다운로드 재개, 스크립트를 이용한 파일 다운로드 자동화 등
    
    더 상세한 설명

    1. 철학의 차이: "데이터와 상호작용" vs "파일 다운로드"

     * `curl`: "나는 URL을 통해 데이터를 주고받는 모든 일을 할 거야."
         * API 서버에 JSON 데이터를 보내고(POST), 응답을 확인하고, 헤더를
           조작하고, 인증 토큰을 보내는 등 양방향 통신에 강점이 있습니다.
         * 결과를 화면에 바로 출력해주기 때문에, 스크립트에서 결과를 변수에 담아
           즉시 처리($(curl ...)), 파이프(|)로 다른 명령어에 전달하는 등의 연계
           작업에 매우 유리합니다.

     * `wget`: "나는 URL이 가리키는 파일을 가져와서 저장하는 일을 할 거야."
         * 다운로드 중 연결이 끊겨도 이어받는 기능, 여러 파일을 한 번에 받는
           기능, 웹사이트의 모든 링크를 따라가며 전체 페이지와 파일을
           다운로드하는 재귀적 다운로드 기능에 특화되어 있습니다.
         * "웹사이트 백업"이나 "대용량 파일 다운로드"와 같은 작업에 최적화되어
           있습니다.

    2. 사용 예시로 보는 차이점

    상황: API 서버에서 사용자 정보를 JSON으로 받아보고 싶을 때

     * `curl` (적합):
       # -H로 헤더를 추가하고, -X로 메소드를 지정하여 API 요청
       curl -X GET -H "Authorization: Bearer my-token" https://api.example.com/users/123
       # 결과가 바로 터미널에 JSON 형태로 출력됨

     * `wget` (부적합):
        wget은 헤더를 추가하거나 메소드를 바꾸는 것이 curl보다 복잡하고, 
        주목적이 아니며, 결과를 파일로 저장해버려 바로 확인하기 번거롭습니다.

    상황: 한글(hwp) 문서를 다운로드하고 싶을 때

     * `curl`:
       # -o 옵션으로 파일 이름을 지정해야 함
       curl -o report.hwp https://example.com/files/report.hwp

     * `wget` (더 편리함):
       # 파일 이름을 지정할 필요 없이 알아서 report.hwp로 저장됨
       wget https://example.com/files/report.hwp

    상황: 특정 웹사이트의 모든 HTML과 이미지를 내 컴퓨터에 저장하고 싶을 때

     * `curl` (불가능):
        curl은 이런 기능 자체가 없습니다.

     * `wget` (가능):
       # -r (recursive), -p (page-requisites) 옵션 등으로 사이트 미러링
       wget -r -p https://www.example.com

    결론: 언제 무엇을 써야 할까?

     * `curl`을 사용해야 할 때:
         * REST API를 테스트하거나 호출할 때 (거의 모든 경우)
         * 요청 헤더를 정밀하게 제어해야 할 때
         * 서버에 데이터를 업로드(POST, PUT)해야 할 때
         * 스크립트 안에서 요청 결과를 변수에 담거나 다른 명령어로 바로 전달하고 싶을 때

     * `wget`을 사용해야 할 때:
         * 웹사이트나 FTP 서버에서 파일을 다운로드하는 것이 주 목적일 때
         * 웹사이트 전체를 백업하거나 오프라인에서 보려고 할 때 (미러링)
         * 대용량 파일을 다운로드하여 이어받기 기능이 필요할 때

    "개발자는 `curl`, 시스템 관리자는 `wget`" 이라는 말이 있을 정도로, 
    두 도구는 각자의 영역에서 최고의 효율을 보여줍니다  
